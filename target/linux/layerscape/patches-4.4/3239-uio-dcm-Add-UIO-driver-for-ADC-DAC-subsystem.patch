From 9035d9c273bb0badd7c266de24e670700dac0273 Mon Sep 17 00:00:00 2001
From: Abhimanyu Saini <abhimanyu.saini@nxp.com>
Date: Mon, 10 Apr 2017 10:51:42 +0530
Subject: [PATCH 12/26] uio: dcm: Add UIO driver for ADC/DAC subsystem

Signed-off-by: Arpit Goel <arpit.goel@nxp.com>
Signed-off-by: Abhimanyu Saini <abhimanyu.saini@nxp.com>
---
 arch/arm64/boot/dts/freescale/fsl-la1575a.dtsi |   9 ++
 drivers/uio/Kconfig                            |   7 ++
 drivers/uio/Makefile                           |   1 +
 drivers/uio/dcm.c                              | 111 +++++++++++++++++++++++++
 4 files changed, 128 insertions(+)
 create mode 100644 drivers/uio/dcm.c

diff --git a/arch/arm64/boot/dts/freescale/fsl-la1575a.dtsi b/arch/arm64/boot/dts/freescale/fsl-la1575a.dtsi
index 2b4c239..aa4854d 100644
--- a/arch/arm64/boot/dts/freescale/fsl-la1575a.dtsi
+++ b/arch/arm64/boot/dts/freescale/fsl-la1575a.dtsi
@@ -791,4 +791,13 @@
 		address = <0x81 0xf0000000>;
 		length = <0x10000000>;
 	};
+
+	dcm: dcm@0xa300000 {
+		compatible = "fsl,dcm";
+		reg = <0 0x0a300000 0 0x1000>,
+		    <0 0x01e00000 0 0x1000>,
+		    <0 0x08b19000 0 0x1000>,
+		    <0 0x0a000000 0 0x8000>,
+		    <0 0x0a090000 0 0x1000>;
+	};
 };
diff --git a/drivers/uio/Kconfig b/drivers/uio/Kconfig
index 52c98ce..de87441 100644
--- a/drivers/uio/Kconfig
+++ b/drivers/uio/Kconfig
@@ -155,4 +155,11 @@ config UIO_MF624
 
 	  If you compile this as a module, it will be called uio_mf624.
 
+config DCM
+	tristate "ADC/DAC Driver"
+	depends on ARM64 && ARCH_LAYERSCAPE
+	default y
+	help
+	  ADC/DAC driver
+
 endif
diff --git a/drivers/uio/Makefile b/drivers/uio/Makefile
index 8560dad..83b2004 100644
--- a/drivers/uio/Makefile
+++ b/drivers/uio/Makefile
@@ -9,3 +9,4 @@ obj-$(CONFIG_UIO_NETX)	+= uio_netx.o
 obj-$(CONFIG_UIO_PRUSS)         += uio_pruss.o
 obj-$(CONFIG_UIO_MF624)         += uio_mf624.o
 obj-$(CONFIG_UIO_FSL_ELBC_GPCM)	+= uio_fsl_elbc_gpcm.o
+obj-$(CONFIG_DCM)		+= dcm.o
diff --git a/drivers/uio/dcm.c b/drivers/uio/dcm.c
new file mode 100644
index 0000000..6cfd062
--- /dev/null
+++ b/drivers/uio/dcm.c
@@ -0,0 +1,111 @@
+/*
+ * drivers/uio/dcm.c
+ * ADC/DAC device driver
+ *
+ * Copyright (C) 2017 Freescale Semiconductor, Inc.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *     * Redistributions of source code must retain the above copyright
+ *       notice, this list of conditions and the following disclaimer.
+ *     * Redistributions in binary form must reproduce the above copyright
+ *       notice, this list of conditions and the following disclaimer in the
+ *       documentation and/or other materials provided with the distribution.
+ *     * Neither the name of Freescale Semiconductor nor the
+ *       names of its contributors may be used to endorse or promote products
+ *       derived from this software without specific prior written permission.
+ *
+ *
+ * ALTERNATIVELY, this software may be distributed under the terms of the
+ * GNU General Public License ("GPL") as published by the Free Software
+ * Foundation, either version 2 of that License or (at your option) any
+ * later version.
+ *
+ * THIS SOFTWARE IS PROVIDED BY Freescale Semiconductor ``AS IS'' AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL Freescale Semiconductor BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include <linux/module.h>
+#include <linux/uio_driver.h>
+#include <linux/types.h>
+#include <linux/platform_device.h>
+#include <linux/kernel.h>
+#include <linux/device.h>
+#include <linux/slab.h>
+#include <linux/device.h>
+#include <linux/module.h>
+#include <linux/of.h>
+#include <linux/of_irq.h>
+#include <linux/of_address.h>
+
+static int dcm_uio_init(struct platform_device *pdev)
+{
+	int i;
+	struct resource res;
+	struct uio_info *info;
+	struct device_node *np = pdev->dev.of_node;
+
+	if (!(info = kzalloc(sizeof(struct uio_info), GFP_KERNEL))) {
+		dev_err(&pdev->dev, "kzalloc failed!\n");
+		return -ENOMEM;
+	}
+
+	/* misc sysfs info */
+	info->priv = info;
+	info->name = "dcm";
+	info->version = "0.1";
+	info->irq = UIO_IRQ_NONE;
+
+	for(i = 0; i < MAX_UIO_MAPS; i++) {
+		if (of_address_to_resource(np, i, &res))
+			break;
+		info->mem[i].addr = res.start;
+		info->mem[i].size = resource_size(&res);
+		info->mem[i].memtype = UIO_MEM_PHYS;
+	}
+
+	/* register device driver with uio framework */
+	if (uio_register_device(&(pdev->dev), info)) {
+		dev_err(&pdev->dev, "dcm_init failed!\n");
+		goto out_free;
+	}
+	dev_set_drvdata(&pdev->dev, info);
+	return 0;
+
+out_free:
+	kfree(info);
+	return -ENODEV;
+}
+
+static int dcm_remove(struct platform_device *pdev)
+{
+	struct uio_info *info = dev_get_drvdata(&pdev->dev);
+	uio_unregister_device(info);
+	kfree(info);
+
+	return 0;
+}
+
+static const struct of_device_id dcm_match[] = {
+	{ .compatible = "fsl,dcm", },
+	{},
+};
+
+struct platform_driver dcm_drv = {
+	.probe = dcm_uio_init,
+	.remove = dcm_remove,
+	.driver = {
+		.name = "dcm",
+		.owner = THIS_MODULE,
+		.of_match_table = dcm_match,
+	},
+};
+module_platform_driver(dcm_drv);
-- 
2.7.4

